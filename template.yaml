AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for Machine Learning Demo


Parameters:
  LambdaEnvironment:
    Type: String
    MinLength: 2
    MaxLength: 10
    AllowedPattern: "^[a-z0-9]*$"
    Default: dev
  DatabaseHost:
    Type: String
    Default: mldemocluster.wvbvp.mongodb.net
  DatabasePort:
    Type: Number
    MinValue: 1024
    MaxValue: 65535
    Default: 27017
  DatabaseUser:
    Type: String
    MinLength: 5
    Default: mldemo_app
  DatabasePassword:
    Type: String
    MinLength: 5
  DatabaseName:
    Type: String
    MinLength: 3
    Default: mldemodb
  CorsAllowedHeaders:
    Type: String
    MinLength: 1
    Default: '*'
  CorsAllowedOrigin:
    Type: String
    MinLength: 1
    Default: '*'
  CorsAllowedMethods:
    Type: String
    MinLength: 1
    Default: '*'
  SessionTimeoutMins:
    Type: Number
    MinValue: 5 # 5 minutes
    MaxValue: 1440 # 24 hours
    Default: 30 # half hour
  GoogleAuthClientSecret:
    Type: String
  GoogleAuthRedirectDevUrl:
    Type: String
    Default: 'http://www.localdev.net:3000/authorize'
  GoogleAuthRedirectProdUrl:
    Type: String
    Default: 'http://app.mldemo.tech/authorize' # for prod
  OpenAIApiKey:
    Type: String
    MinLength: 20
    MaxLength: 602
Conditions:
  LambdaEnvIsDev: !Equals [ !Sub '${LambdaEnvironment}', dev ]

Globals:
  Function:
    Timeout: 120
    MemorySize: 4096
    Environment:
      Variables:
        LAMBDA_ENVIRONMENT: !Sub '${LambdaEnvironment}'
        CORS_ALLOWED_HEADERS: !Sub '${CorsAllowedHeaders}'
        CORS_ALLOWED_ORIGIN: !Sub '${CorsAllowedOrigin}'
        CORS_ALLOWED_METHODS: !Sub '${CorsAllowedMethods}'
        SESSION_TIMEOUT_MINS: !Sub '${SessionTimeoutMins}'
        #GOOGLE_AUTH_REDIRECT_URL: !Sub '${GoogleAuthRedirectUrl}'
        GOOGLE_AUTH_REDIRECT_URL:
          !If [ LambdaEnvIsDev, !Sub '${GoogleAuthRedirectDevUrl}', !Sub '${GoogleAuthRedirectProdUrl}' ]

Resources:
  MLDemoDatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${LambdaEnvironment}.MLDemoDatabaseSecret'
      SecretString: !Sub '{"username": "${DatabaseUser}","password": "${DatabasePassword}","host": "${DatabaseHost}","dbname": "${DatabaseName}"}'

  GoogleAuthSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${LambdaEnvironment}.GoogleAuthSecret'
      SecretString: !Sub '{"client_secret": "${GoogleAuthClientSecret}"}'

  OpenAIApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${LambdaEnvironment}.OpenAIApiKey'
      SecretString: !Sub '{"api_key": "${OpenAIApiKey}"}'

  JWTEncodeKeySecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${LambdaEnvironment}.JWTEncodeKeySecret'
      Description: "This secret has a dynamically generated secret password for encoding JWT requests."
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: "key"
        PasswordLength: 30
        ExcludePunctuation: true

  MLDemoApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      # StageName: Prod
      StageName: !Sub '${LambdaEnvironment}'
      BinaryMediaTypes:
        - image/jpeg
        - image/png
      Auth:
        DefaultAuthorizer: JWTCustomAuthorizer
        Authorizers:
          JWTCustomAuthorizer:
            FunctionArn: !GetAtt JWTAuthFunction.Arn
        AddDefaultAuthorizerToCorsPreflight: False
      Cors:
        AllowMethods: !Sub "'${CorsAllowedMethods}'"
        AllowHeaders: !Sub "'${CorsAllowedHeaders}'"
        AllowOrigin: !Sub "'${CorsAllowedOrigin}'"


  JWTAuthFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      Dockerfile: api/user/authorizer/Dockerfile
      DockerContext: .
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt MLDemoLambdaFunctionRole.Arn

  ObjectModelFunction:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: api/object-model/Dockerfile
      DockerContext: .
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt MLDemoLambdaFunctionRole.Arn
      Events:
        ObjectModelPostApi:
          Type: Api
          Properties:
            RestApiId: !Ref MLDemoApi
            Path: '/object-model'
            Method: POST

  ASRModelFunction:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: api/asr-model/Dockerfile
      DockerContext: .
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt MLDemoLambdaFunctionRole.Arn
      Events:
        ASRModelApi:
          Type: Api
          Properties:
            RestApiId: !Ref MLDemoApi
            Path: '/asr-model'
            Method: POST

  ApiUserLoginFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      Dockerfile: api/user/login/Dockerfile.login
      DockerContext: .
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt MLDemoLambdaFunctionRole.Arn
      Events:
        LoginAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MLDemoApi
            Path: '/user/login'
            Method: ANY
            Auth:
              Authorizer: NONE

  ApiRefreshTokenFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      Dockerfile: api/user/login/Dockerfile.refresh
      DockerContext: .
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt MLDemoLambdaFunctionRole.Arn
      Events:
        RefreshTokenAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MLDemoApi
            Path: '/user/refresh-token'
            Method: POST

  ApiUserListFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      Dockerfile: api/user/read/Dockerfile
      DockerContext: .
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt MLDemoLambdaFunctionRole.Arn
      Events:
        LoginAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MLDemoApi
            Path: '/user'
            Method: GET

  ApiUserReadFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      Dockerfile: api/user/read/Dockerfile
      DockerContext: .
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt MLDemoLambdaFunctionRole.Arn
      Events:
        LoginAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MLDemoApi
            Path: '/user/{Id}'
            Method: GET

  ApiUserCreateFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      Dockerfile: api/user/create/Dockerfile
      DockerContext: .
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt MLDemoLambdaFunctionRole.Arn
      Events:
        LoginAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MLDemoApi
            Path: '/user'
            Method: POST

  ApiUserUpdateFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      Dockerfile: api/user/update/Dockerfile
      DockerContext: .
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt MLDemoLambdaFunctionRole.Arn
      Events:
        LoginAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MLDemoApi
            Path: '/user/{Id}'
            Method: PUT

  ApiUserDeleteFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      Dockerfile: api/user/delete/Dockerfile
      DockerContext: .
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt MLDemoLambdaFunctionRole.Arn
      Events:
        LoginAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MLDemoApi
            Path: '/user/{Id}'
            Method: DELETE

#  UploadBucket:
#    Type: 'AWS::S3::Bucket'
#    DependsOn:
#      - UploadBucketInvokeObjectModelFunctionPermission
#      - UploadBucketInvokeCarModelFunctionPermission
#    DeletionPolicy: Retain
#    Properties:
#      BucketName: !Sub 'mldemo-upload-images-bucket-${LambdaEnvironment}'
#      NotificationConfiguration:
#        LambdaConfigurations:
#          - Event: s3:ObjectCreated:*
#            Function: !GetAtt ObjectModelFunction.Arn
#            Filter:
#              S3Key:
#                Rules:
#                  - Name: prefix
#                    Value: in/object
#                  - Name: suffix
#                    Value: jpg
#          - Event: s3:ObjectCreated:*
#            Function: !GetAtt CarModelFunction.Arn
#            Filter:
#              S3Key:
#                Rules:
#                  - Name: prefix
#                    Value: in/car
#                  - Name: suffix
#                    Value: jpg
#
#  UploadBucketInvokeObjectModelFunctionPermission:
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: 'lambda:InvokeFunction'
#      FunctionName: !GetAtt ObjectModelFunction.Arn
#      Principal: s3.amazonaws.com
#      SourceArn: !Sub 'arn:aws:s3:::mldemo-upload-images-bucket-${LambdaEnvironment}'
#      SourceAccount: !Ref AWS::AccountId
#
#  UploadBucketInvokeCarModelFunctionPermission:
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: 'lambda:InvokeFunction'
#      FunctionName: !GetAtt CarModelFunction.Arn
#      Principal: s3.amazonaws.com
#      SourceArn: !Sub 'arn:aws:s3:::mldemo-upload-images-bucket-${LambdaEnvironment}'
#      SourceAccount: !Ref AWS::AccountId

  MLDemoLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: SecretValueAccessPolicy
          PolicyDocument:
             Version: 2012-10-17
             Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetResourcePolicy'
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:ListSecretVersionIds'
                Resource: 'arn:aws:secretsmanager:*:*:*'
        - PolicyName: LogWriter
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: 'arn:aws:logs:*:*:*'
#        - PolicyName: FileReaderWriter
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 's3:GetObject'
#                  - 's3:PutObject'
#                Resource: 'arn:aws:s3:::mldemo-upload-images-bucket/*'


